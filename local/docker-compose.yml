version: '3.5'

networks:
  prefect:
    name: prefect


services:
  # --------------------------------------#
  #               Postgres                #
  # --------------------------------------#
  postgres:
    image: postgres:14
    command:
      - postgres
      - -c
      - max_connections=150
    environment:
        POSTGRES_USER: $POSTGRES_USER
        POSTGRES_PASSWORD: $POSTGRES_PASSWORD
        POSTGRES_DB: $POSTGRES_DB
    healthcheck:
      interval: 10s
      retries: 60
      start_period: 2s
      test: pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER} | grep "accepting connections" || exit 1
      timeout: 2s
    ports:
    - published: 5433
      target: 5432
    restart: on-failure
    networks:
      - prefect

  # --------------------------------------#
  #             Prefect Server            #
  # --------------------------------------#
  prefect-server:
    image: prefecthq/prefect:2.6.6-python3.9
    command: ["prefect", "orion", "start"]
    restart: always
    ports:
      - 4200:4200
    depends_on:
      postgres:
        condition: service_started
    volumes:
      - ${PWD}/volumes/prefect:/root/.prefect
      - ${PWD}/flows:/flows
    environment:
      PREFECT_ORION_API_HOST: 0.0.0.0
      PREFECT_ORION_DATABASE_CONNECTION_URL: postgresql+asyncpg://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB
      PREFECT_ORION_ANALYTICS_ENABLED: "false"
      PREFECT_LOGGING_SERVER_LEVEL: WARNING
      PREFECT_API_URL: http://localhost:4200/api      
    networks:
      - prefect

  # --------------------------------------#
  #             Prefect Agent             #
  # --------------------------------------#
  prefect-agent:
    image: prefecthq/prefect:2.6.6-python3.9
    command:
      - prefect
      - agent
      - start
      - -q
      - default
    depends_on:
      prefect-server:
        condition: service_started
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
      PREFECT_LOGGING_LEVEL: DEBUG
      DOCKER_HOST: unix://var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - prefect

  # --------------------------------------#
  #             Prefect CLI               #
  # --------------------------------------#
  prefect-cli:
    build: ./prefect-cli 
    entrypoint: "bash"
    working_dir: "/root/flows"
    volumes:
      - "../prefect/flows:/root/flows"
      - ../great_expectations:/root/great_expectations
      - ../dbt:/root/dbt
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
      PREFECT_LOGGING_LEVEL: DEBUG
      DOCKER_HOST: unix://var/run/docker.sock
      DBT_PROFILES_DIR: /root/dbt
#       Use PREFECT_API_KEY to use the CLI to interact with Prefect Cloud
#     - PREFECT_API_KEY=YOUR_API_KEY
    networks:
      - prefect
    profiles: ["prefect-cli"]

  # --------------------------------------#
  #             DBT CLI               #
  # --------------------------------------#
  dbt-cli:
    image: ghcr.io/dbt-labs/dbt-postgres:1.3.latest
    entrypoint: "bash"
    working_dir: "/root/dbt/etl_spike"
    volumes:
      - "../dbt:/root/dbt"
      - ../great_expectations:/root/great_expectations
    environment:
      DBT_PROFILES_DIR: /root/dbt
      DOCKER_HOST: unix://var/run/docker.sock
    networks:
      - prefect
    profiles: ["dbt-cli"]

  # --------------------------------------#
  #         Minio for storage             #
  # --------------------------------------#
  minio:
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=blablabla
      - MINIO_ROOT_PASSWORD=blablabla
    volumes:
      - ./volumes/minio:/data
    entrypoint: /bin/bash 
    command: "-c 'mkdir -p /data/prefect-flows && sleep 10 && minio server /data --console-address :9001'"
    ports:
      - published: 9000
        target: 9000
      - published: 9001
        target: 9001
    networks:
      - prefect

  # --------------------------------------#
  #         Great Expectations Data Docs (WIP)  #
  # --------------------------------------#
  great_expectations:
    build: ./great_expectations 
    working_dir: "/root"
    entrypoint: "bash"
    #command: "great_expectations docs build"
    volumes:
      - ../great_expectations:/root/great_expectations
